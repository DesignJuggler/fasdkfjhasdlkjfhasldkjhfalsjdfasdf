Cuadro Comparativo:
------ ------------

BOINC:
+ BOINC es multiplataforma.- (Windows, Lunux, MAC OS, Unix, etc-)
- Los componentes del server estan centralizados y no distribuidos.
.. Modelo PULL: El voluntario pide nuevos trabajos al servidor..
- Anonimidad de los voluntarios..
- La Comunicacion entre los diferentes módulos via BDD
* Tiene un proceso nativo para eliminar archivos temporales.
* Codigo Abierto
* Random Exponential Backoff: arribo de pedidos estable en el tiempo!
* Soporte para gran volumen de datos
* Interfaz web para voluntarios
* Seguridad: algunas UP algunas DOWN
* Mala Documentación o Faltante.
* No balancea la carga
* No distribuye sus componentes teniendo localidad espacial ni temporal
* Los voluntarios por mas que esten en la misma maquina, no pueden compartir sus archivos.
* Tareas poco automatizadas
* Restriccion de una unica BDD: MySql
* API reducida: Fortran y C++.
* Antecesor: NADIE

XtreamWeb:
+ Utiliza tecnología P2P.-
+ Compatible con redes GRID.-
+ Altamente paralelizable
* Antecesor: NADIE
- Arquitectura Centralizada.-

XtreamWeb-CH:
* Antecesor: XtreamWeb
* Permite Ejecución de aplicaciones paralelas/distribuidas compuestas
* Comunicacion entre modulos via RPC.-
* Arquitectura Parcialmente descentralizada con respecto a XW.
* Comunicacion directa entre nodos trabajadores/voluntarios.-
* Cuenta con una amplia API multi-lenguaje (lenguaje JAVA, C/C++ y Python).-


Xgrid:
* Software y protocolo propietario de Apple.
* Preinstalado en ordenadores con MAC OS.
* Un equipo puede cumplir cualquier rol, sin ningún cambio. (servidor/proyecto cliente/voluntario)
* Pobre interfaz para control de trabajos: Via linea de comandos.
* Los agentes deben autenticarse, no son anonimos.
* Poca versatilidad y eficiencia en manejo de datos, son XML ocupando un 4/3 mas que el original
* Los datos van del proyecto cliente - al controlador - al agente. y no van de proyecto cliente a agente.
* Permisos UNIX
* Ejecucion en Sandbox
* Elimina todos los hijos de los procesos cuando termina la ejecucion.
* Shared FS, si se lo administra bien
* No puede definirse la cantidad de recursos de antemano
* Tareas concurrentes no pueden corren en el mismo agente
* La autenticacion no es 100% confiable.
* BUGS importantes: memory leaks y necesidad de reinicio del controlador si se queda sin red.

Grid MP:
* Licencia comercial
* Multiplataforma: Linux, Windows, Mac OS, Solaris, etc.
* Multilenguaje: aunque con preferencias marcadas en "C++", proporciona SDK con ejemplos en Perl, C++, Java, C#.
* Preparado para BDD comerciales: ejemplos de store-procedures para DB2 y Oracle
* Seguridad: firmas digitales/ SSL.
* Restricciones de recursos.
* Reasignacion automatica en caso de falla.
* Ambiente de ejecucion seguro (sandbox)
* Los usuarios se autentican
* Diferentes interfaces para enviar los datos. (MGSI, Consola de Gestión, etc.)
* Posibilidad de consumir datos en paralelo y empleo de trabajos basados en MPI.
* Hay comunicación entre los "voluntarios"/"workers".
* Hay redundancia en la ejecucion de las tareas.
* Tiene un proceso nativo para eliminar archivos temporales.



SLINC:
* Al estar desarrollado en Java, es multi-plataforma e independiente del S.O.
* Antecesor: BOINC
* Comunicacion entre modulos via RPC.-
* El codigo puede escribirse en cualquier lenguaje con soporte de libreria XML-RPC.
* El uso de Hibernate, permite la flexiblidad en el tipo de bdd que un proyecto usa. BOINC no lo hace..
  SLINC provides the ability to use the embedded HSQLDB database, MySQL, PostgreSQL, Oracle, or Microsoft SQL Server.
* No existe la comunicacion entre los clientes/voluntarios.
* Hay un unico cliente x PC voluntaria.
* No usa encripcion de ningun tipo.
* Instalacion y creacion de proyectos mas rapida que BOINC


XWHEP:
* Licencia Open Source, GPL.
* Multiplataforma (Win32, linux, mac os x)
* Tolerante a Fallas.
* Multi aplicacion
* Multi usuarios
* Antecesor: XW
* Las comunicaciones estan encriptadas.
* Los recursos son anonimos, pero los usuarios no.
* Es distribuido y transparente: soporte P2P.
* Es seguro
* Power-On automatico basado en la carga de la PC.
* Tiene permisos de usuarios y tareas.
* Modo PULL, multi-protocolo
* MySQL DB

USAR el cuadro de XtreamWeb-HEP Introduction pagina 6





Conclusion:
Cuando en el año 2010; comenzamos a barajar la posibilidad de hacer un trabajo integrador, pensamos que sería muy importante y enriquecedor estudiar e investigar un tópico que no hubiese sido abarcado durante la "Especialidad en Sistemas y Servicios Distribuidos". De esta manera, surgió el tema del cómputo voluntario; ya que no habia sido presentado y no teniamos claro cual era el impacto que tenia en los sistemas distribuidos. Luego de realizar la investigación, podemos concluir que el cómputo voluntario maneja un gran volumen de datos y poder de cómputo, por lo que no debe ser tomado a la ligera. 
Realmente cuesta creer que máquinas hogareñas logren un poder de cómputo cercano a 1.5 petaflops, solo cuando estan corriendo el protector de pantallas.
A lo largo del presente trabajo, se han identificado los sistemas de cómputo voluntario más importantes y más populares del mercado; sin hacer ningún tipo de distinción en cuanto a licencias; ya sean GPL, LGPL, comerciales, cerradas o distribuidas dentro de un SO.
Creemos que los objetivos generales de investigación planteados al inicio del trabajo han sido cumplidos, desprendiendose que los aportes más importantes han sido los siguientes: 

* Analizar y estudiar el estado del arte de los sistemas de cómputo voluntario.
* Relevar las tecnologias y frameworks utilizados.
* Identificar las arquitecturas de cada sistema en particular, describiendo sus componentes principales, su funcionamiento y su ciclo de vida.
* Realizar una extensa comparación de cada uno de ellos mediante un cuadro resúmen, con las caracteristicas mas importantes de cada uno.
* Relevar los proyectos que esten utilizando esta metodología actualmente.
* Cuantificar este tipo de proyectos: poder de cómputo, cantidad de usuarios, paises involucrados.
* Identificar las fortalezas y debilidades de estos sistemas.
* Proponer mejoras tanto a BOINC como a estos sistemas en general.
* Efectuar un estudio de costos, aunque preliminar, que demuestre la factibilidad de hacer rentado este tipo de sistemas.
* Establecer el punto de partida, tanto al proyecto cliente que no esta seguro de que sistema de cómputo voluntario seleccionar como a aquel usuario de PC; que quiere compartir sus recursos con algun proyecto de investigación y no sabe como hacerlo. 

En cuanto a la elección del mejor sistema de cómputo voluntario, podríamos decir que XWHEP es muy versatil en su arquitectura, muy seguro, y con todas los beneficios de P2P; pero su documentación y su propaganda no son buenas. Posiblemente tengamos el sistema corriendo en la mejor arquitectura, pero sin voluntarios. En contrapartida, podemos decir que BOINC es el que mejor propaganda tiene, mayor cantidad de voluntarios experimentados y que maneja grandes volumenes de datos; pero es lento y puede que falle su base de datos MySQL (para usuarios de SETI; no sería raro); haciendo que el proyecto no progrese y hasta perdiendo voluntarios.
Lo anterior no hace mas que ejemplificar que debido a la heterogeneidad de los sistemas, no puede identificarse claramente y "a priori" el mejor sistema de cómputo voluntario; sino que el investigador encargado del proyecto debe evaluar cada uno de ellos dependiendo la arquitectura que se amolde mas a sus necesidades y a los recursos voluntarios con los que disponga.

Trabajos futuros:
Los sistemas de cómputo voluntario han demostrado ser dinámicos y "reinventarse" a partir de sus predecesores; caso XWHEP, XtremWeb-CH y SLINC), por lo que la investigación nunca estará completa. Siempre se esperan nuevos sistemas que abarquen y den solucion a nuevas necesidades, por lo que deberian compararse con los anteriores. 
Por otro lado, las mejoras que dejamos planteadas deberían ser implementadas finalmente en sistemas de cómputo voluntario, para ayudar a la comunidad de investigadores y de voluntarios a tener sistemas más seguros y confiables.
Por último, creemos que una investigación profunda del estudio de costos podria beneficiar el trabajo; ayudando a tomar la dificil decision de pasar de sistemas anonimos y completamente voluntarios; a sistemas hibridos; con voluntarios y "voluntades compradas".




* Poner Creative Commons Chirimbols.. DOne!
* Actualizar el indice.




